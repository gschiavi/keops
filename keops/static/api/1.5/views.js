// Generated by CoffeeScript 2.3.1
(function() {
  var FacetView, SearchField, SearchFilter, SearchGroup, SearchItem, SearchMenu, SearchQuery, SearchView,
    indexOf = [].indexOf;

  SearchMenu = class SearchMenu {
    constructor(element, parent1, options1) {
      this.element = element;
      this.parent = parent1;
      this.options = options1;
      this.input = this.parent.find('.search-view-input');
      this.input.on('keyup', (evt) => {
        if (this.input.val().length) {
          return this.show();
        } else {
          return this.close();
        }
      }).on('keydown', (evt) => {
        var item;
        switch (evt.which) {
          case $.ui.keyCode.BACKSPACE:
            if (this.input.val() === '') {
              item = this.searchView.query.items[this.searchView.query.items.length - 1];
              this.searchView.onRemoveItem(evt, item);
            }
            break;
        }
      }).on('blur', (evt) => {
        this.input.val('');
        return this.close();
      });
    }

    link() {
      return this.element.hide();
    }

    show() {
      return this.element.show();
    }

    close() {
      this.element.hide();
      return this.reset();
    }

    expand(item) {
      var scope;
      scope = this.searchView.scope;
      return scope.model.getFieldChoices(item.ref.name, scope.search.text).then((res) => {
        var j, len, obj, ref1, results;
        console.log(res);
        if (res.ok) {
          ref1 = res.result.items;
          results = [];
          for (j = 0, len = ref1.length; j < len; j++) {
            obj = ref1[j];
            results.push(this.searchView.loadItem(item.item, obj, item));
          }
          return results;
        }
      });
    }

    collapse(item) {
      var i, j, len, ref1;
      ref1 = item.children;
      for (j = 0, len = ref1.length; j < len; j++) {
        i = ref1[j];
        i.remove();
      }
      return item.children = [];
    }

    reset() {
      var i, j, len, ref1, results;
      ref1 = this.searchView.items;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        i = ref1[j];
        if (i.children && i.children.length) {
          this.collapse(i);
          results.push(i.reset());
        } else {
          results.push(void 0);
        }
      }
      return results;
    }

    select(evt, item) {
      if (this.options.select) {
        if (item.parentItem) {
          item.parentItem.value = item.value;
          item = item.parentItem;
        }
        item.searchString = this.input.val();
        this.options.select(evt, item);
        return this.input.val('');
      }
    }

  };

  SearchQuery = class SearchQuery {
    constructor(searchView1) {
      this.searchView = searchView1;
      this.items = [];
      this.groups = [];
    }

    add(item) {
      if (indexOf.call(this.items, item) >= 0) {
        item.facet.addValue(item);
        item.facet.refresh();
      } else {
        this.items.push(item);
        this.searchView.renderFacets();
      }
      if (item instanceof SearchGroup) {
        this.groups.push(item);
      }
      return this.searchView.change();
    }

    remove(item) {
      this.items.splice(this.items.indexOf(item), 1);
      item.facet.element.remove();
      delete item.facet;
      if (item instanceof SearchGroup) {
        this.groups.splice(this.groups.indexOf(item), 1);
      }
      return this.searchView.change();
    }

    getParams() {
      var i, j, len, r, ref1;
      r = [];
      ref1 = this.items;
      for (j = 0, len = ref1.length; j < len; j++) {
        i = ref1[j];
        r = r.concat(i.getParamValues());
      }
      console.log('params', r);
      return r;
    }

  };

  // TODO remove this class
  FacetView = class FacetView {
    constructor(item1) {
      this.item = item1;
      this.values = [
        {
          searchString: this.item.getDisplayValue(),
          value: this.item.value
        }
      ];
    }

    addValue(item1) {
      this.item = item1;
      return this.values.push({
        searchString: this.item.getDisplayValue(),
        value: this.item.value
      });
    }

    templateValue() {
      var s, sep;
      sep = ` <span class="facet-values-separator">${Katrid.i18n.gettext('or')}</span> `;
      return ((function() {
        var j, len, ref1, results;
        ref1 = this.values;
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          s = ref1[j];
          results.push(s.searchString);
        }
        return results;
      }).call(this)).join(sep);
    }

    template() {
      var s;
      s = `<span class="facet-label">${this.item.getFacetLabel()}</span>`;
      return `<div class="facet-view">\n${s}\n<span class="facet-value">${this.templateValue()}</span>\n<span class="fa fa-sm fa-remove facet-remove"></span>\n</div>`;
    }

    link(searchView) {
      var html, rm;
      html = $(this.template());
      this.item.facet = this;
      this.element = html;
      rm = html.find('.facet-remove');
      rm.click((evt) => {
        return searchView.onRemoveItem(evt, this.item);
      });
      return html;
    }

    refresh() {
      return this.element.find('.facet-value').html(this.templateValue());
    }

  };

  SearchItem = class SearchItem {
    constructor(name1, item1, parent1, ref1, menu1) {
      this.name = name1;
      this.item = item1;
      this.parent = parent1;
      this.ref = ref1;
      this.menu = menu1;
      this.label = this.item.attr('label') || (this.ref && this.ref['caption']) || this.name;
    }

    templateLabel() {
      return ` Pesquisar <i>${this.label}</i> por: <strong>\${search.text}</strong>`;
    }

    template() {
      var s;
      s = '';
      if (this.expandable) {
        s = "<a class=\"expandable\" href=\"#\"></a>";
      }
      if (this.value) {
        s = `<a class="search-menu-item indent" href="#">${this.value[1]}</a>`;
      } else {
        s += `<a href="#" class="search-menu-item">${this.templateLabel()}</a>`;
      }
      return `<li>${s}</li>`;
    }

    link(scope, $compile, parent) {
      var html;
      html = $compile(this.template())(scope);
      if (parent != null) {
        html.insertAfter(parent.element);
        parent.children.push(this);
        this.parentItem = parent;
      } else {
        html.appendTo(this.parent);
      }
      this.element = html;
      this.itemEl = html.find('.search-menu-item').click(function(evt) {
        return evt.preventDefault();
      }).mousedown((evt) => {
        evt.stopPropagation();
        evt.preventDefault();
        this.menu.select(evt, this);
        return this.menu.close();
      });
      this.expand = html.find('.expandable').on('mousedown', (evt) => {
        this.expanded = !this.expanded;
        evt.stopPropagation();
        evt.preventDefault();
        $(evt.target).toggleClass('expandable expanded');
        if (this.expanded) {
          return this.searchView.menu.expand(this);
        } else {
          return this.searchView.menu.collapse(this);
        }
      }).click(function(evt) {
        return evt.preventDefault();
      });
      return false;
    }

    getFacetLabel() {
      console.log('get facet label');
      return this.label;
    }

    getDisplayValue() {
      if (this.value) {
        return this.value[1];
      }
      return this.searchString;
    }

    getValue() {
      var s;
      return (function() {
        var j, len, ref1, results;
        ref1 = this.facet.values;
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          s = ref1[j];
          results.push(s.value || s.searchString);
        }
        return results;
      }).call(this);
    }

    getParamValue(name, value) {
      var r;
      r = {};
      if ($.isArray(value)) {
        r[name] = value[0];
      } else {
        r[name + '__icontains'] = value;
      }
      return r;
    }

    getParamValues() {
      var j, len, r, ref1, v;
      r = [];
      ref1 = this.getValue();
      for (j = 0, len = ref1.length; j < len; j++) {
        v = ref1[j];
        r.push(this.getParamValue(this.name, v));
      }
      if (r.length > 1) {
        return [
          {
            'OR': r
          }
        ];
      }
      return r;
    }

    remove() {
      return this.element.remove();
    }

    reset() {
      this.expanded = false;
      this.expand.removeClass('expanded');
      return this.expand.addClass('expandable');
    }

  };

  SearchField = class SearchField extends SearchItem {
    constructor(name, item, parent, ref, menu) {
      super(name, item, parent, ref, menu);
      if (ref.type === 'ForeignKey') {
        this.expandable = true;
        this.children = [];
      } else {
        this.expandable = false;
      }
    }

  };

  SearchFilter = class SearchFilter extends SearchItem {};

  SearchGroup = class SearchGroup extends SearchItem {
    constructor(name, item, parent, ref, menu) {
      var ctx;
      super(name, item, parent, ref, menu);
      ctx = item.attr('context');
      console.log(item);
      if (typeof ctx === 'string') {
        this.context = JSON.parse(ctx);
      } else {
        this.context = {
          grouping: [name]
        };
      }
    }

    getFacetLabel() {
      return '<span class="fa fa-bars"></span>';
    }

    templateLabel() {
      return Katrid.i18n.gettext('Group by:') + ' ' + this.label;
    }

    getDisplayValue() {
      return this.label;
    }

  };

  SearchView = class SearchView {
    constructor(scope1, options) {
      this.onSelectItem = this.onSelectItem.bind(this);
      this.onRemoveItem = this.onRemoveItem.bind(this);
      this.scope = scope1;
      this.query = new SearchQuery(this);
      this.items = [];
    }

    createMenu(scope, el, parent) {
      var menu;
      menu = new SearchMenu(el, parent, {
        select: this.onSelectItem
      });
      menu.searchView = this;
      return menu;
    }

    template() {
      var html;
      return html = `<div class="search-area">\n  <div class="search-view">\n    <div class="search-view-facets"></div>\n    <input class="search-view-input" role="search" placeholder="${Katrid.i18n.gettext('Search...')}" ng-model="search.text">\n    <span class="search-view-more fa fa-search-plus"></span>\n  </div>\n  <div class="col-sm-12">\n  <ul class="dropdown-menu search-view-menu" role="menu"></ul>\n  </div>\n</div>`;
    }

    link(scope, el, attrs, controller, $compile) {
      var html, item, j, len, ref1;
      html = $compile(this.template())(scope);
      el.replaceWith(html);
      html.addClass(attrs.class);
      this.$compile = $compile;
      this.view = scope.views.search;
      this.viewContent = $(this.view.content);
      this.element = html;
      this.searchView = html.find('.search-view');
      html.find('.search-view-more').click((evt) => {
        $(evt.target).toggleClass('fa-search-plus fa-search-minus');
        return this.viewMoreToggle();
      });
      this.menu = this.createMenu(scope, $(html.find('.dropdown-menu.search-view-menu')), html);
      this.menu.searchView = this;
      this.menu.link();
      // input key control events
      this.menu.input.on('keydown', function(evt) {});
      ref1 = this.viewContent.children();
      // add items to menu
      for (j = 0, len = ref1.length; j < len; j++) {
        item = ref1[j];
        this.loadItem($(item));
      }
    }

    loadItem(item, value, parent, cls) {
      var grouping, j, len, name, ref1, tag;
      tag = item.prop('tagName');
      if (cls == null) {
        if (tag === 'FIELD') {
          cls = SearchField;
        } else if (tag === 'FILTER') {
          cls = SearchFilter;
        } else if (tag === 'GROUP') {
          console.log('group', item);
          ref1 = item.children();
          for (j = 0, len = ref1.length; j < len; j++) {
            grouping = ref1[j];
            this.loadItem($(grouping), null, null, SearchGroup);
          }
          return;
        }
      }
      name = item.attr('name');
      item = new cls(name, item, this.menu.element, this.view.fields[name], this.menu);
      item.searchView = this;
      if (value) {
        item.expandable = false;
        item.value = value;
      }
      item.link(this.scope, this.$compile, parent);
      return this.items.push(item);
    }

    renderFacets() {
      var el, f, item, j, len, ref1, results;
      ref1 = this.query.items;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        item = ref1[j];
        if (!item.facet) {
          f = new FacetView(item);
          el = f.link(this);
          results.push(el.insertBefore(this.menu.input));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }

    viewMoreToggle() {
      this.viewMore = !this.viewMore;
      return this.scope.$apply(() => {
        console.log(this.viewMore);
        return this.scope.search.viewMoreButtons = this.viewMore;
      });
    }

    onSelectItem(evt, obj) {
      return this.query.add(obj);
    }

    onRemoveItem(evt, obj) {
      return this.query.remove(obj);
    }

    change() {
      if (this.query.groups.length || (this.scope.dataSource.groups && this.scope.dataSource.groups.length)) {
        this.scope.action.applyGroups(this.query.groups);
      }
      if (this.query.groups.length === 0) {
        return this.scope.action.setSearchParams(this.query.getParams());
      }
    }

  };

  Katrid.UI.Views = {
    SearchView: SearchView,
    SearchMenu: SearchMenu
  };

}).call(this);

//# sourceMappingURL=views.js.map
